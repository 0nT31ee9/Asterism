// Generated by gencpp from file lidar_sim/yolo_msg.msg
// DO NOT EDIT!


#ifndef LIDAR_SIM_MESSAGE_YOLO_MSG_H
#define LIDAR_SIM_MESSAGE_YOLO_MSG_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace lidar_sim
{
template <class ContainerAllocator>
struct yolo_msg_
{
  typedef yolo_msg_<ContainerAllocator> Type;

  yolo_msg_()
    : label()
    , x1(0)
    , y1(0)
    , x2(0)
    , y2(0)
    , center_x(0)
    , center_y(0)  {
    }
  yolo_msg_(const ContainerAllocator& _alloc)
    : label(_alloc)
    , x1(0)
    , y1(0)
    , x2(0)
    , y2(0)
    , center_x(0)
    , center_y(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _label_type;
  _label_type label;

   typedef int32_t _x1_type;
  _x1_type x1;

   typedef int32_t _y1_type;
  _y1_type y1;

   typedef int32_t _x2_type;
  _x2_type x2;

   typedef int32_t _y2_type;
  _y2_type y2;

   typedef int32_t _center_x_type;
  _center_x_type center_x;

   typedef int32_t _center_y_type;
  _center_y_type center_y;





  typedef boost::shared_ptr< ::lidar_sim::yolo_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::lidar_sim::yolo_msg_<ContainerAllocator> const> ConstPtr;

}; // struct yolo_msg_

typedef ::lidar_sim::yolo_msg_<std::allocator<void> > yolo_msg;

typedef boost::shared_ptr< ::lidar_sim::yolo_msg > yolo_msgPtr;
typedef boost::shared_ptr< ::lidar_sim::yolo_msg const> yolo_msgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::lidar_sim::yolo_msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::lidar_sim::yolo_msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::lidar_sim::yolo_msg_<ContainerAllocator1> & lhs, const ::lidar_sim::yolo_msg_<ContainerAllocator2> & rhs)
{
  return lhs.label == rhs.label &&
    lhs.x1 == rhs.x1 &&
    lhs.y1 == rhs.y1 &&
    lhs.x2 == rhs.x2 &&
    lhs.y2 == rhs.y2 &&
    lhs.center_x == rhs.center_x &&
    lhs.center_y == rhs.center_y;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::lidar_sim::yolo_msg_<ContainerAllocator1> & lhs, const ::lidar_sim::yolo_msg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace lidar_sim

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::lidar_sim::yolo_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lidar_sim::yolo_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lidar_sim::yolo_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lidar_sim::yolo_msg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lidar_sim::yolo_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lidar_sim::yolo_msg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::lidar_sim::yolo_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c27fe395966734d5c3bb5d6a88f1f99a";
  }

  static const char* value(const ::lidar_sim::yolo_msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc27fe395966734d5ULL;
  static const uint64_t static_value2 = 0xc3bb5d6a88f1f99aULL;
};

template<class ContainerAllocator>
struct DataType< ::lidar_sim::yolo_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "lidar_sim/yolo_msg";
  }

  static const char* value(const ::lidar_sim::yolo_msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::lidar_sim::yolo_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string label\n"
"int32 x1\n"
"int32 y1\n"
"int32 x2\n"
"int32 y2\n"
"int32 center_x\n"
"int32 center_y\n"
;
  }

  static const char* value(const ::lidar_sim::yolo_msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::lidar_sim::yolo_msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.label);
      stream.next(m.x1);
      stream.next(m.y1);
      stream.next(m.x2);
      stream.next(m.y2);
      stream.next(m.center_x);
      stream.next(m.center_y);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct yolo_msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::lidar_sim::yolo_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::lidar_sim::yolo_msg_<ContainerAllocator>& v)
  {
    s << indent << "label: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.label);
    s << indent << "x1: ";
    Printer<int32_t>::stream(s, indent + "  ", v.x1);
    s << indent << "y1: ";
    Printer<int32_t>::stream(s, indent + "  ", v.y1);
    s << indent << "x2: ";
    Printer<int32_t>::stream(s, indent + "  ", v.x2);
    s << indent << "y2: ";
    Printer<int32_t>::stream(s, indent + "  ", v.y2);
    s << indent << "center_x: ";
    Printer<int32_t>::stream(s, indent + "  ", v.center_x);
    s << indent << "center_y: ";
    Printer<int32_t>::stream(s, indent + "  ", v.center_y);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LIDAR_SIM_MESSAGE_YOLO_MSG_H
