// Generated by gencpp from file lidar_sim/shot.msg
// DO NOT EDIT!


#ifndef LIDAR_SIM_MESSAGE_SHOT_H
#define LIDAR_SIM_MESSAGE_SHOT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace lidar_sim
{
template <class ContainerAllocator>
struct shot_
{
  typedef shot_<ContainerAllocator> Type;

  shot_()
    : shot(0)  {
    }
  shot_(const ContainerAllocator& _alloc)
    : shot(0)  {
  (void)_alloc;
    }



   typedef int8_t _shot_type;
  _shot_type shot;





  typedef boost::shared_ptr< ::lidar_sim::shot_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::lidar_sim::shot_<ContainerAllocator> const> ConstPtr;

}; // struct shot_

typedef ::lidar_sim::shot_<std::allocator<void> > shot;

typedef boost::shared_ptr< ::lidar_sim::shot > shotPtr;
typedef boost::shared_ptr< ::lidar_sim::shot const> shotConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::lidar_sim::shot_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::lidar_sim::shot_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::lidar_sim::shot_<ContainerAllocator1> & lhs, const ::lidar_sim::shot_<ContainerAllocator2> & rhs)
{
  return lhs.shot == rhs.shot;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::lidar_sim::shot_<ContainerAllocator1> & lhs, const ::lidar_sim::shot_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace lidar_sim

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::lidar_sim::shot_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lidar_sim::shot_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lidar_sim::shot_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lidar_sim::shot_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lidar_sim::shot_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lidar_sim::shot_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::lidar_sim::shot_<ContainerAllocator> >
{
  static const char* value()
  {
    return "08639d6a3e086b1cfe56bdf224f3fbc8";
  }

  static const char* value(const ::lidar_sim::shot_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x08639d6a3e086b1cULL;
  static const uint64_t static_value2 = 0xfe56bdf224f3fbc8ULL;
};

template<class ContainerAllocator>
struct DataType< ::lidar_sim::shot_<ContainerAllocator> >
{
  static const char* value()
  {
    return "lidar_sim/shot";
  }

  static const char* value(const ::lidar_sim::shot_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::lidar_sim::shot_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int8 shot\n"
;
  }

  static const char* value(const ::lidar_sim::shot_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::lidar_sim::shot_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.shot);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct shot_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::lidar_sim::shot_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::lidar_sim::shot_<ContainerAllocator>& v)
  {
    s << indent << "shot: ";
    Printer<int8_t>::stream(s, indent + "  ", v.shot);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LIDAR_SIM_MESSAGE_SHOT_H
