// Generated by gencpp from file lidar_sim/yolo_msg_array.msg
// DO NOT EDIT!


#ifndef LIDAR_SIM_MESSAGE_YOLO_MSG_ARRAY_H
#define LIDAR_SIM_MESSAGE_YOLO_MSG_ARRAY_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <lidar_sim/yolo_msg.h>

namespace lidar_sim
{
template <class ContainerAllocator>
struct yolo_msg_array_
{
  typedef yolo_msg_array_<ContainerAllocator> Type;

  yolo_msg_array_()
    : yolo_array()  {
    }
  yolo_msg_array_(const ContainerAllocator& _alloc)
    : yolo_array(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::lidar_sim::yolo_msg_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::lidar_sim::yolo_msg_<ContainerAllocator> >> _yolo_array_type;
  _yolo_array_type yolo_array;





  typedef boost::shared_ptr< ::lidar_sim::yolo_msg_array_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::lidar_sim::yolo_msg_array_<ContainerAllocator> const> ConstPtr;

}; // struct yolo_msg_array_

typedef ::lidar_sim::yolo_msg_array_<std::allocator<void> > yolo_msg_array;

typedef boost::shared_ptr< ::lidar_sim::yolo_msg_array > yolo_msg_arrayPtr;
typedef boost::shared_ptr< ::lidar_sim::yolo_msg_array const> yolo_msg_arrayConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::lidar_sim::yolo_msg_array_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::lidar_sim::yolo_msg_array_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::lidar_sim::yolo_msg_array_<ContainerAllocator1> & lhs, const ::lidar_sim::yolo_msg_array_<ContainerAllocator2> & rhs)
{
  return lhs.yolo_array == rhs.yolo_array;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::lidar_sim::yolo_msg_array_<ContainerAllocator1> & lhs, const ::lidar_sim::yolo_msg_array_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace lidar_sim

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::lidar_sim::yolo_msg_array_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lidar_sim::yolo_msg_array_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lidar_sim::yolo_msg_array_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lidar_sim::yolo_msg_array_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lidar_sim::yolo_msg_array_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lidar_sim::yolo_msg_array_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::lidar_sim::yolo_msg_array_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a085b1524497b4e27e72f595045ab303";
  }

  static const char* value(const ::lidar_sim::yolo_msg_array_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa085b1524497b4e2ULL;
  static const uint64_t static_value2 = 0x7e72f595045ab303ULL;
};

template<class ContainerAllocator>
struct DataType< ::lidar_sim::yolo_msg_array_<ContainerAllocator> >
{
  static const char* value()
  {
    return "lidar_sim/yolo_msg_array";
  }

  static const char* value(const ::lidar_sim::yolo_msg_array_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::lidar_sim::yolo_msg_array_<ContainerAllocator> >
{
  static const char* value()
  {
    return "yolo_msg[] yolo_array\n"
"\n"
"\n"
"================================================================================\n"
"MSG: lidar_sim/yolo_msg\n"
"string label\n"
"int32 x1\n"
"int32 y1\n"
"int32 x2\n"
"int32 y2\n"
"int32 center_x\n"
"int32 center_y\n"
;
  }

  static const char* value(const ::lidar_sim::yolo_msg_array_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::lidar_sim::yolo_msg_array_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.yolo_array);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct yolo_msg_array_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::lidar_sim::yolo_msg_array_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::lidar_sim::yolo_msg_array_<ContainerAllocator>& v)
  {
    s << indent << "yolo_array[]" << std::endl;
    for (size_t i = 0; i < v.yolo_array.size(); ++i)
    {
      s << indent << "  yolo_array[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::lidar_sim::yolo_msg_<ContainerAllocator> >::stream(s, indent + "    ", v.yolo_array[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // LIDAR_SIM_MESSAGE_YOLO_MSG_ARRAY_H
