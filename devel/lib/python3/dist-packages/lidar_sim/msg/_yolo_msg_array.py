# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from lidar_sim/yolo_msg_array.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import lidar_sim.msg

class yolo_msg_array(genpy.Message):
  _md5sum = "a085b1524497b4e27e72f595045ab303"
  _type = "lidar_sim/yolo_msg_array"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """yolo_msg[] yolo_array


================================================================================
MSG: lidar_sim/yolo_msg
string label
int32 x1
int32 y1
int32 x2
int32 y2
int32 center_x
int32 center_y
"""
  __slots__ = ['yolo_array']
  _slot_types = ['lidar_sim/yolo_msg[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       yolo_array

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(yolo_msg_array, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.yolo_array is None:
        self.yolo_array = []
    else:
      self.yolo_array = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.yolo_array)
      buff.write(_struct_I.pack(length))
      for val1 in self.yolo_array:
        _x = val1.label
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_6i().pack(_x.x1, _x.y1, _x.x2, _x.y2, _x.center_x, _x.center_y))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.yolo_array is None:
        self.yolo_array = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.yolo_array = []
      for i in range(0, length):
        val1 = lidar_sim.msg.yolo_msg()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.label = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.label = str[start:end]
        _x = val1
        start = end
        end += 24
        (_x.x1, _x.y1, _x.x2, _x.y2, _x.center_x, _x.center_y,) = _get_struct_6i().unpack(str[start:end])
        self.yolo_array.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.yolo_array)
      buff.write(_struct_I.pack(length))
      for val1 in self.yolo_array:
        _x = val1.label
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_6i().pack(_x.x1, _x.y1, _x.x2, _x.y2, _x.center_x, _x.center_y))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.yolo_array is None:
        self.yolo_array = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.yolo_array = []
      for i in range(0, length):
        val1 = lidar_sim.msg.yolo_msg()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.label = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.label = str[start:end]
        _x = val1
        start = end
        end += 24
        (_x.x1, _x.y1, _x.x2, _x.y2, _x.center_x, _x.center_y,) = _get_struct_6i().unpack(str[start:end])
        self.yolo_array.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_6i = None
def _get_struct_6i():
    global _struct_6i
    if _struct_6i is None:
        _struct_6i = struct.Struct("<6i")
    return _struct_6i
